# This is an auto generated Dockerfile for ros2:source
# generated from docker_images_ros2/source/create_ros_image.Dockerfile.em

ARG FROM_IMAGE=ros:rolling
FROM $FROM_IMAGE

RUN \
  # set -x for debug output
  set -x && \
  apt-get update -y -qq && \
  : "install ROS dependencies" && \
  apt-get -y install --no-install-recommends \
  clang-format-12 \
  python3-pygraphviz \
  python3-rospkg \
  libdw-dev \ 
  libelf-dev \ 
  python3-pip \
  ros-rolling-ackermann-msgs \
  ros-rolling-ament-cmake-google-benchmark \
  ros-rolling-angles \
  ros-rolling-backward-ros\
  ros-rolling-camera-info-manager \
  ros-rolling-diagnostic-updater \
  ros-rolling-filters \
  # ros-rolling-gazebo-dev \
  ros-rolling-generate-parameter-library \
  ros-rolling-generate-parameter-library-py \
  ros-rolling-joint-state-publisher-gui \
  # ros-rolling-plotjuggler-msgs \
  # ros-rolling-plotjuggler-ros \
  ros-rolling-python-qt-binding \
  ros-rolling-realtime-tools \ 
  ros-rolling-rqt-gui \
  ros-rolling-rqt-gui-py \
  ros-rolling-rviz2 \
  ros-rolling-test-msgs \
  ros-rolling-xacro \
  && \
  : "remove cache" && \
  apt-get autoremove -y -qq && \
  apt-get clean -y && \
  rm -rf /var/lib/apt/lists/*

# This Dockerfile adds a non-root user with sudo access. Use the "remoteUser"
# property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
# will be updated to match your local UID/GID (when using the dockerFile property).
# See https://aka.ms/vscode-remote/containers/non-root-user for details.
ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Options for common package install script - SHA generated on release
ARG INSTALL_ZSH="false"
ARG UPGRADE_PACKAGES="true"
ARG COMMON_SCRIPT_SOURCE="https://raw.githubusercontent.com/microsoft/vscode-dev-containers/v0.241.1/script-library/common-debian.sh"
ARG COMMON_SCRIPT_SHA="ab4609258940b032d02ed08d4c776e9e66e1a2a21dd2f3313a8fc1c4fee607d0"

# Configure apt and install packages
RUN apt-get update \
  && export DEBIAN_FRONTEND=noninteractive \
  #
  # Verify git, common tools / libs installed, add/modify non-root user, optionally install zsh
  && apt-get -y install --no-install-recommends curl ca-certificates 2>&1 \
  && curl -sSL  ${COMMON_SCRIPT_SOURCE} -o /tmp/common-debian.sh \
  && ([ "${COMMON_SCRIPT_SHA}" = "dev-mode" ] || (echo "${COMMON_SCRIPT_SHA} /tmp/common-debian.sh" | sha256sum -c -)) \
  && /bin/bash /tmp/common-debian.sh "${INSTALL_ZSH}" "${USERNAME}" "${USER_UID}" "${USER_GID}" "${UPGRADE_PACKAGES}" "true" "true" \
  && rm /tmp/common-debian.sh \
  && apt-get -y install --no-install-recommends build-essential gdb gdbserver cmake aptitude udev can-utils python3-pyqtgraph 2>&1 \
  #
  # Clean ups
  && apt-get autoremove -y \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*

# install esbonio for sphinx 
RUN pip install esbonio && pip3 install pre-commit

# Switch back to dialog for any ad-hoc use of apt-get
ENV DEBIAN_FRONTEND=dialog

RUN echo "source /opt/ros/rolling/setup.bash" >> "/home/${USERNAME}/.bashrc" \
  && echo "source /usr/share/gazebo/setup.sh" >>"/home/${USERNAME}/.bashrc"  \
  && usermod -aG 104 ${USERNAME} \
  && usermod -aG video ${USERNAME} \
  && usermod -aG dialout ${USERNAME} \
  && usermod -aG kvm ${USERNAME} # joystick

